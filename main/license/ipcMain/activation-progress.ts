import { ipcMain, BrowserWindow } from "electron";
import { logger } from "../../logger";

/**
 * Activation Progress Handler
 * 
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á progress updates ‡πÑ‡∏õ renderer process
 * ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö real-time activation status
 */

export interface ProgressUpdate {
  step: string;
  progress: number;
  message?: string;
  timestamp: number;
  data?: any;
}

export interface ProgressStep {
  key: string;
  label: string;
  description?: string;
  icon?: string;
}

// Activation steps definition
export const ACTIVATION_STEPS: ProgressStep[] = [
  {
    key: 'file-loading',
    label: '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå license',
    description: '‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå license.lic',
    icon: 'üìÑ'
  },
  {
    key: 'file-parsing',
    label: '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå license',
    description: '‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå',
    icon: 'üîç'
  },
  {
    key: 'expiry-check',
    label: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏',
    description: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ license ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏',
    icon: 'üìÖ'
  },
  {
    key: 'organization-validation',
    label: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£',
    description: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö',
    icon: 'üè¢'
  },
  {
    key: 'wifi-credentials',
    label: '‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• WiFi',
    description: '‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• WiFi ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ESP32',
    icon: 'üîê'
  },
  {
    key: 'wifi-connecting',
    label: '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ WiFi ESP32',
    description: '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢ WiFi ‡∏Ç‡∏≠‡∏á ESP32',
    icon: 'üì∂'
  },
  {
    key: 'mac-retrieval',
    label: '‡∏î‡∏∂‡∏á MAC Address',
    description: '‡∏î‡∏∂‡∏á MAC Address ‡∏à‡∏≤‡∏Å ESP32',
    icon: 'üîó'
  },
  {
    key: 'mac-validation',
    label: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö MAC Address',
    description: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö MAC Address ‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô license',
    icon: '‚úÖ'
  },
  {
    key: 'saving',
    label: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£ activation',
    description: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ activation ‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
    icon: 'üíæ'
  },
  {
    key: 'success',
    label: '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô',
    description: '‡∏Å‡∏≤‡∏£ activation ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢',
    icon: 'üéâ'
  },
  {
    key: 'error',
    label: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
    description: '‡∏Å‡∏≤‡∏£ activation ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß',
    icon: '‚ùå'
  }
];

export class ActivationProgressManager {
  private static instance: ActivationProgressManager;
  private currentWindow: BrowserWindow | null = null;
  private currentProgress: ProgressUpdate | null = null;

  static getInstance(): ActivationProgressManager {
    if (!this.instance) {
      this.instance = new ActivationProgressManager();
    }
    return this.instance;
  }

  setWindow(window: BrowserWindow): void {
    this.currentWindow = window;
  }

  /**
   * ‡∏™‡πà‡∏á progress update ‡πÑ‡∏õ renderer
   */
  async sendProgress(step: string, progress: number, message?: string, data?: any): Promise<void> {
    const update: ProgressUpdate = {
      step,
      progress: Math.min(100, Math.max(0, progress)), // Clamp between 0-100
      message,
      timestamp: Date.now(),
      data
    };

    this.currentProgress = update;

    // ‡∏™‡πà‡∏á‡πÑ‡∏õ renderer process
    if (this.currentWindow && !this.currentWindow.isDestroyed()) {
      this.currentWindow.webContents.send('activation-progress', update);
    }

    // Log ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debugging
    console.log(`info: Activation progress - ${step}: ${progress}%${message ? ` - ${message}` : ''}`);

    // Log ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÑ‡∏õ audit trail
    if (progress === 100 || step === 'error' || step === 'success') {
      await logger({
        user: "system",
        message: `License activation ${step}: ${progress}%${message ? ` - ${message}` : ''}`
      });
    }
  }

  /**
   * ‡∏™‡πà‡∏á error progress
   */
  async sendError(error: string, step?: string): Promise<void> {
    await this.sendProgress(step || 'error', 0, error);
  }

  /**
   * ‡∏™‡πà‡∏á success progress
   */
  async sendSuccess(message?: string, data?: any): Promise<void> {
    await this.sendProgress('success', 100, message, data);
  }

  /**
   * ‡∏î‡∏∂‡∏á current progress
   */
  getCurrentProgress(): ProgressUpdate | null {
    return this.currentProgress;
  }

  /**
   * Reset progress
   */
  reset(): void {
    this.currentProgress = null;
  }
}

export const activationProgressHandler = async () => {
  
  // Get activation steps definition
  ipcMain.handle("get-activation-steps", async (_event): Promise<ProgressStep[]> => {
    return ACTIVATION_STEPS;
  });

  // Get current progress
  ipcMain.handle("get-activation-progress", async (_event): Promise<ProgressUpdate | null> => {
    const progressManager = ActivationProgressManager.getInstance();
    return progressManager.getCurrentProgress();
  });

  // Reset progress (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏° activation ‡πÉ‡∏´‡∏°‡πà)
  ipcMain.handle("reset-activation-progress", async (_event): Promise<void> => {
    const progressManager = ActivationProgressManager.getInstance();
    progressManager.reset();
    
    console.log("info: Activation progress reset");
  });

  // Manual progress update (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö testing ‡∏´‡∏£‡∏∑‡∏≠ custom step)
  ipcMain.handle("update-activation-progress", async (event, update: Partial<ProgressUpdate>): Promise<void> => {
    const progressManager = ActivationProgressManager.getInstance();
    
    if (update.step && typeof update.progress === 'number') {
      await progressManager.sendProgress(
        update.step, 
        update.progress, 
        update.message, 
        update.data
      );
    } else {
      throw new Error('Missing required step or progress fields');
    }
  });

  // Get step info by key
  ipcMain.handle("get-step-info", async (_event, stepKey: string): Promise<ProgressStep | null> => {
    const step = ACTIVATION_STEPS.find(s => s.key === stepKey);
    return step || null;
  });

  // Bulk progress update (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö complex workflows)
  ipcMain.handle("batch-activation-progress", async (_event, updates: Partial<ProgressUpdate>[]): Promise<void> => {
    const progressManager = ActivationProgressManager.getInstance();
    
    for (const update of updates) {
      if (update.step && typeof update.progress === 'number') {
        await progressManager.sendProgress(
          update.step,
          update.progress,
          update.message,
          update.data
        );
        
        // Delay ‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á updates ‡πÄ‡∏û‡∏∑‡πà‡∏≠ smooth animation
        await new Promise(resolve => setTimeout(resolve, 100));
      }
    }
  });

  // Progress subscription for renderer (alternative to webContents.send)
  ipcMain.handle("subscribe-activation-progress", async (event): Promise<boolean> => {
    try {
      const progressManager = ActivationProgressManager.getInstance();
      const window = BrowserWindow.fromWebContents(event.sender);
      
      if (window) {
        progressManager.setWindow(window);
        console.log("info: Activation progress subscription established");
        return true;
      } else {
        console.log("warn: Could not establish progress subscription - no window found");
        return false;
      }
    } catch (error) {
      console.error("error: Failed to subscribe to activation progress:", error);
      return false;
    }
  });

  // Helper: Calculate progress percentage for specific workflow
  ipcMain.handle("calculate-step-progress", async (_event, currentStep: string, totalSteps?: number): Promise<number> => {
    const stepCount = totalSteps || ACTIVATION_STEPS.filter(s => s.key !== 'error').length;
    const currentIndex = ACTIVATION_STEPS.findIndex(s => s.key === currentStep);
    
    if (currentIndex === -1) {
      return 0;
    }
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì percentage based on step position
    const progress = Math.round((currentIndex / (stepCount - 1)) * 100);
    return Math.min(100, Math.max(0, progress));
  });
};

// Export singleton instance ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÉ‡∏ô other modules
export const progressManager = ActivationProgressManager.getInstance();