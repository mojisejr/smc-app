import { Setting } from "../../db/model/setting.model";
import { logger } from "../logger";
import { getValidationMode, logPhase42Configuration } from "../utils/environment";

/**
 * CLI License Validator - Phase 9: WiFi-Free Version
 * 
 * ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏ö Base64 license ‡πÄ‡∏î‡∏¥‡∏°‡∏î‡πâ‡∏ß‡∏¢ CLI License File System
 * ‡πÉ‡∏ä‡πâ AES-256-CBC encryption ‡πÅ‡∏•‡∏∞ ESP32 MAC address binding
 * Phase 9: ‡∏•‡∏ö WiFi dependency ‡∏≠‡∏≠‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ Chicken-Egg Problem
 */

// Database activation flag
const ACTIVATION_FLAG = "CLI_LICENSE_ACTIVATED";

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏ñ‡∏π‡∏Å activate ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 * ‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏≤‡∏Å database flag ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (quick check)
 */
export async function isSystemActivated(): Promise<boolean> {
  try {
    const setting = await Setting.findOne({ where: { id: 1 } });
    const activatedKey = setting?.dataValues.activated_key;
    
    const isActivated = activatedKey === ACTIVATION_FLAG;
    
    // Log ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
    await logger({
      user: "system",
      message: `License activation check: ${isActivated ? 'activated' : 'not activated'}`
    });
    
    return isActivated;
  } catch (error) {
    console.error("error: Failed to check activation status:", error);
    await logger({
      user: "system", 
      message: `License activation check failed: ${error.message}`
    });
    return false;
  }
}

/**
 * ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ activation ‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
 * ‡πÄ‡∏Å‡πá‡∏ö flag ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
 */
export async function saveLicenseActivation(): Promise<boolean> {
  try {
    const result = await Setting.update(
      { activated_key: ACTIVATION_FLAG },
      { where: { id: 1 } }
    );
    
    if (result[0] > 0) {
      await logger({
        user: "system",
        message: "License activation saved to database successfully"
      });
      return true;
    } else {
      throw new Error("No rows updated in Setting table");
    }
  } catch (error) {
    console.error("error: Failed to save license activation:", error);
    await logger({
      user: "system",
      message: `Failed to save license activation: ${error.message}`
    });
    return false;
  }
}

/**
 * ‡∏•‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ activation ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
 * ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ deactivate ‡∏´‡∏£‡∏∑‡∏≠ reset
 */
export async function clearLicenseActivation(): Promise<void> {
  try {
    await Setting.update(
      { activated_key: null },
      { where: { id: 1 } }
    );
    
    await logger({
      user: "system",
      message: "License activation cleared from database"
    });
  } catch (error) {
    console.error("error: Failed to clear license activation:", error);
    await logger({
      user: "system",
      message: `Failed to clear license activation: ${error.message}`
    });
  }
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö license ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô (database + file existence)
 * ‡πÑ‡∏°‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ESP32 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
 */
export async function validateLicenseQuick(): Promise<boolean> {
  try {
    // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö database flag
    const isActivated = await isSystemActivated();
    if (!isActivated) {
      return false;
    }
    
    // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ license.lic file ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const { LicenseFileManager } = await import('./file-manager');
    const licenseFile = await LicenseFileManager.findLicenseFile();
    
    if (!licenseFile) {
      console.log("debug: license.lic file not found, clearing activation");
      await clearLicenseActivation();
      return false;
    }
    
    return true;
  } catch (error) {
    console.error("error: Quick license validation failed:", error);
    return false;
  }
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö license ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö (‡∏£‡∏ß‡∏° ESP32 validation)
 * ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
 */
export async function validateLicenseWithESP32(): Promise<boolean> {
  try {
    // 1. Quick validation ‡∏Å‡πà‡∏≠‡∏ô
    const quickValid = await validateLicenseQuick();
    if (!quickValid) {
      return false;
    }
    
    // 2. ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞ parse license file
    const { LicenseFileManager } = await import('./file-manager');
    const licenseData = await LicenseFileManager.parseLicenseFile();
    
    if (!licenseData) {
      console.log("debug: Failed to parse license file");
      return false;
    }
    
    // 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
    const expiryDate = new Date(licenseData.expiryDate);
    const today = new Date();
    
    if (expiryDate < today) {
      console.log("debug: License expired:", licenseData.expiryDate);
      await logger({
        user: "system",
        message: `License validation failed: License expired on ${licenseData.expiryDate}`
      });
      return false;
    }
    
    // 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö MAC address ‡∏Å‡∏±‡∏ö ESP32
    const { ESP32Client } = await import('./esp32-client');
    const esp32Mac = await ESP32Client.getMacAddress();
    
    if (!esp32Mac) {
      console.log("debug: Cannot retrieve MAC address from ESP32");
      await logger({
        user: "system",
        message: "License validation failed: Cannot connect to ESP32"
      });
      return false;
    }
    
    if (licenseData.macAddress.toUpperCase() !== esp32Mac.toUpperCase()) {
      console.log("debug: MAC address mismatch");
      console.log("debug: License MAC:", licenseData.macAddress);
      console.log("debug: ESP32 MAC:", esp32Mac);
      await logger({
        user: "system", 
        message: "License validation failed: MAC address mismatch"
      });
      return false;
    }
    
    await logger({
      user: "system",
      message: `License validation successful - expires: ${licenseData.expiryDate}`
    });
    
    return true;
    
  } catch (error) {
    console.error("error: Full license validation failed:", error);
    await logger({
      user: "system",
      message: `License validation error: ${error.message}`
    });
    return false;
  }
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö organization ‡πÅ‡∏•‡∏∞ customer data ‡∏ß‡πà‡∏≤‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö setting ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 */
export async function validateOrganizationData(licenseData: any): Promise<boolean> {
  try {
    const setting = await Setting.findOne({ where: { id: 1 } });
    if (!setting) {
      throw new Error("Setting record not found");
    }
    
    const organization = setting.dataValues.organization;
    const customerName = setting.dataValues.customer_name;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö organization matching
    if (licenseData.organization !== organization) {
      console.log("debug: Organization mismatch");
      console.log("debug: License org:", licenseData.organization);
      console.log("debug: Setting org:", organization);
      return false;
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö customer matching  
    if (licenseData.customerId !== customerName) {
      console.log("debug: Customer ID mismatch");
      console.log("debug: License customer:", licenseData.customerId);
      console.log("debug: Setting customer:", customerName);
      return false;
    }
    
    return true;
  } catch (error) {
    console.error("error: Organization data validation failed:", error);
    return false;
  }
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö license (Phase 9: WiFi-Free)
 * üîí ‡πÉ‡∏ä‡πâ ESP32 MAC address binding ‡πÄ‡∏™‡∏°‡∏≠ - ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ WiFi credentials
 */
export async function validateLicense(): Promise<boolean> {
  console.log('info: Phase 9: WiFi-Free License Validation - MAC address binding only');
  
  await logger({
    user: 'system',
    message: 'Phase 9: License validation starting - WiFi-free approach with ESP32 MAC binding'
  });
  
  // Phase 9: ‡πÉ‡∏ä‡πâ ESP32 hardware validation ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ WiFi credentials
  console.log('info: üîí MAC-only hardware binding validation (WiFi-free)');
  return await validateLicenseWithESP32();
}

/**
 * Enhanced validation ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö production deployment (Phase 9: WiFi-Free)
 * ‡∏£‡∏ß‡∏° ESP32 ‡πÅ‡∏•‡∏∞ MAC address validation ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ WiFi credentials
 */
export async function validateLicenseForProduction(): Promise<{
  valid: boolean;
  error?: string;
  details?: {
    licenseFileFound: boolean;
    databaseActivated: boolean;
    esp32Connected: boolean;
    macAddressMatched: boolean;
    licenseExpired: boolean;
  };
}> {
  console.log('info: Running production license validation (Phase 9: WiFi-free)...');
  
  const details = {
    licenseFileFound: false,
    databaseActivated: false,
    esp32Connected: false,
    macAddressMatched: false,
    licenseExpired: false,
  };

  try {
    // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö database activation flag
    const isActivated = await isSystemActivated();
    details.databaseActivated = isActivated;
    
    if (!isActivated) {
      return {
        valid: false,
        error: 'System not activated - no license found in database',
        details
      };
    }

    // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö license file
    const { LicenseFileManager } = await import('./file-manager');
    const licenseFile = await LicenseFileManager.findLicenseFile();
    details.licenseFileFound = !!licenseFile;
    
    if (!licenseFile) {
      return {
        valid: false,
        error: 'License file not found in expected locations',
        details
      };
    }

    // 3. Parse license data
    const licenseData = await LicenseFileManager.parseLicenseFile(licenseFile);
    if (!licenseData) {
      return {
        valid: false,
        error: 'Unable to parse license file',
        details
      };
    }

    // 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
    const expiryDate = new Date(licenseData.expiryDate);
    const today = new Date();
    details.licenseExpired = expiryDate < today;
    
    if (details.licenseExpired) {
      return {
        valid: false,
        error: `License expired on ${licenseData.expiryDate}`,
        details
      };
    }

    // 5. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ESP32 connection (optional for production)
    try {
      const { ESP32Client } = await import('./esp32-client');
      const esp32Mac = await ESP32Client.getMacAddress();
      details.esp32Connected = !!esp32Mac;
      
      if (esp32Mac) {
        details.macAddressMatched = licenseData.macAddress.toUpperCase() === esp32Mac.toUpperCase();
        
        if (!details.macAddressMatched) {
          console.warn(`warn: MAC address mismatch - License: ${licenseData.macAddress}, ESP32: ${esp32Mac}`);
          // In production, MAC mismatch is a warning, not a failure
        }
      }
      
    } catch (esp32Error) {
      console.warn('warn: ESP32 connection failed during production validation:', esp32Error);
      // ESP32 connection failure is not critical for production validation
      details.esp32Connected = false;
    }

    await logger({
      user: 'system',
      message: `Phase 9: Production license validation successful - expires: ${licenseData.expiryDate}, ESP32: ${details.esp32Connected ? 'connected' : 'offline'} (WiFi-free)`
    });

    return {
      valid: true,
      details
    };

  } catch (error: any) {
    console.error('error: Production license validation failed:', error);
    
    await logger({
      user: 'system',
      message: `Production license validation error: ${error.message}`
    });

    return {
      valid: false,
      error: error.message,
      details
    };
  }
}