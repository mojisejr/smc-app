/**
 * Environment Detection Utilities
 * 
 * ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö environment ‡πÅ‡∏•‡∏∞ platform 
 * ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î behavior ‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á development ‡πÅ‡∏•‡∏∞ production
 */

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô development environment ‡∏ö‡∏ô macOS ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 * ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö bypass WiFi connection ‡πÉ‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á development
 * 
 * @returns true ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô development mode ‡∏ö‡∏ô macOS
 */
export function isDevelopmentBypass(): boolean {
  const nodeEnv = process.env.NODE_ENV || 'production';
  const platform = process.platform;
  
  // Development bypass ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ö‡∏ô macOS ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
  return nodeEnv === 'development' && platform === 'darwin';
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô production environment ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 * 
 * @returns true ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô production mode
 */
export function isProduction(): boolean {
  const nodeEnv = process.env.NODE_ENV || 'production';
  return nodeEnv === 'production';
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö platform ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
 * 
 * @returns platform string (darwin, win32, linux, etc.)
 */
export function getCurrentPlatform(): string {
  return process.platform;
}

/**
 * ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• environment ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
 * ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debugging ‡πÅ‡∏•‡∏∞ logging
 */
export function getEnvironmentInfo(): {
  nodeEnv: string;
  platform: string;
  isDevelopmentBypass: boolean;
  isProduction: boolean;
} {
  return {
    nodeEnv: process.env.NODE_ENV || 'production',
    platform: process.platform,
    isDevelopmentBypass: isDevelopmentBypass(),
    isProduction: isProduction()
  };
}

/**
 * Log environment information
 * ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• environment ‡πÉ‡∏ô console ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debugging
 */
export function logEnvironmentInfo(): void {
  const envInfo = getEnvironmentInfo();
  
  console.log('info: Environment Information:');
  console.log(`info:   NODE_ENV: ${envInfo.nodeEnv}`);
  console.log(`info:   Platform: ${envInfo.platform}`);
  console.log(`info:   Development Bypass: ${envInfo.isDevelopmentBypass}`);
  console.log(`info:   Production Mode: ${envInfo.isProduction}`);
  
  if (envInfo.isDevelopmentBypass) {
    console.log('‚ö†Ô∏è  Development Mode: Some features may be mocked or bypassed');
  }
}

// ===========================================
// PHASE 4.2: PRODUCTION LICENSE & WIFI MANAGEMENT
// ===========================================

/**
 * License validation mode types
 * - bypass: ‡∏Ç‡πâ‡∏≤‡∏° validation ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (development only)
 * - real-hardware: ‡πÉ‡∏ä‡πâ ESP32 ‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô dev mode (‡πÑ‡∏°‡πà mock)  
 * - production: Full license validation (production)
 */
export type ValidationMode = 'bypass' | 'real-hardware' | 'production';

/**
 * Platform WiFi strategy types
 * - auto: ‡∏•‡∏≠‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ WiFi ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (Windows)
 * - manual: ‡πÅ‡∏™‡∏î‡∏á instructions ‡πÉ‡∏´‡πâ user ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏≠‡∏á (macOS)
 */
export type WiFiStrategy = 'auto' | 'manual';

/**
 * ‡∏Å‡∏≥‡∏´‡∏ô‡∏î validation mode ‡∏ï‡∏≤‡∏° environment variables
 * 
 * @returns ValidationMode ‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:
 *   1. bypass - ‡∏ñ‡πâ‡∏≤ SMC_LICENSE_BYPASS_MODE=true
 *   2. real-hardware - ‡∏ñ‡πâ‡∏≤ development + SMC_DEV_REAL_HARDWARE=true  
 *   3. production - default behavior
 */
export function getValidationMode(): ValidationMode {
  // Priority 1: Full bypass mode (development only)
  if (process.env.SMC_LICENSE_BYPASS_MODE === 'true') {
    return 'bypass';
  }
  
  // Priority 2: Development with real hardware  
  if (process.env.NODE_ENV === 'development' && process.env.SMC_DEV_REAL_HARDWARE === 'true') {
    return 'real-hardware';
  }
  
  // Priority 3: Production mode (default)
  return 'production';
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô license bypass mode ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 * 
 * @returns true ‡∏ñ‡πâ‡∏≤ SMC_LICENSE_BYPASS_MODE=true
 */
export function isLicenseBypassMode(): boolean {
  return process.env.SMC_LICENSE_BYPASS_MODE === 'true';
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô real hardware mode ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 * 
 * @returns true ‡∏ñ‡πâ‡∏≤ development + SMC_DEV_REAL_HARDWARE=true
 */
export function isRealHardwareMode(): boolean {
  return process.env.NODE_ENV === 'development' && process.env.SMC_DEV_REAL_HARDWARE === 'true';
}

/**
 * ‡∏Å‡∏≥‡∏´‡∏ô‡∏î platform WiFi strategy
 * 
 * @returns WiFiStrategy ‡∏ï‡∏≤‡∏° platform ‡πÅ‡∏•‡∏∞ environment:
 *   - auto: Windows ‡∏´‡∏£‡∏∑‡∏≠ SMC_PLATFORM_WIFI_AUTO=true
 *   - manual: macOS ‡∏´‡∏£‡∏∑‡∏≠ SMC_PLATFORM_WIFI_AUTO=false
 */
export function getPlatformWiFiStrategy(): WiFiStrategy {
  // ‡∏ñ‡πâ‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ SMC_PLATFORM_WIFI_AUTO ‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏ä‡πâ‡∏ï‡∏≤‡∏°‡∏ô‡∏±‡πâ‡∏ô
  if (process.env.SMC_PLATFORM_WIFI_AUTO !== undefined) {
    return process.env.SMC_PLATFORM_WIFI_AUTO === 'true' ? 'auto' : 'manual';
  }
  
  // Default behavior: Windows = auto, macOS = manual
  return process.platform === 'win32' ? 'auto' : 'manual';
}

/**
 * ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Phase 4.2 configuration ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 */
export function logPhase42Configuration(): void {
  const validationMode = getValidationMode();
  const wifiStrategy = getPlatformWiFiStrategy();
  
  console.log('info: Phase 4.2 Configuration:');
  console.log(`info:   Validation Mode: ${validationMode}`);
  console.log(`info:   WiFi Strategy: ${wifiStrategy} (${process.platform})`);
  console.log(`info:   License Bypass: ${isLicenseBypassMode()}`);
  console.log(`info:   Real Hardware: ${isRealHardwareMode()}`);
  
  if (validationMode === 'bypass') {
    console.log('üîì License validation will be bypassed');
  }
  
  if (wifiStrategy === 'manual') {
    console.log('üì∂ Manual WiFi connection required');
  }
}