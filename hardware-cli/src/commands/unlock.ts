/**
 * Unlock Command
 * Unlocks specific DS12/DS16 slots using raw 0x81 command
 */

import chalk from 'chalk';
import { DS12Connection } from '../serial/connection';
import { buildUnlockPacket } from '../protocol/packet-builder';
import { getBestPort, testPortConnection } from '../serial/port-detector';
import { PROTOCOL_CONSTANTS } from '../protocol/constants';

export interface UnlockOptions {
  port?: string;
  timeout?: number;
  verbose?: boolean;
  force?: boolean;
}

export async function unlockCommand(slotNumber: string, options: UnlockOptions = {}): Promise<void> {
  console.log(chalk.blue(`üîì ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏¢‡∏≤‡∏ó‡∏µ‡πà ${slotNumber}...`));

  try {
    // Validate slot number
    const slot = parseInt(slotNumber);
    if (isNaN(slot) || slot < 1 || slot > PROTOCOL_CONSTANTS.DS12_MAX_SLOTS) {
      console.error(chalk.red(`‚ùå ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ä‡πà‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${slotNumber}`));
      console.log(chalk.gray(`üí° ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: 1-${PROTOCOL_CONSTANTS.DS12_MAX_SLOTS}`));
      process.exit(1);
    }

    // Safety warning for medical device
    if (!options.force) {
      console.log(chalk.yellow('‚ö†Ô∏è  ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏¢‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå'));
      console.log(chalk.yellow('   ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÅ‡∏•‡πâ‡∏ß'));
      console.log(chalk.gray('   ‡πÉ‡∏ä‡πâ --force ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡πâ‡∏≤‡∏°‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ'));
      
      // In a real implementation, you might want to add a confirmation prompt
      console.log(chalk.gray('   ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠...'));
    }

    // Determine which port to use
    let portPath = options.port;
    
    if (!portPath) {
      console.log(chalk.gray('üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥...'));
      const bestPort = await getBestPort();
      
      if (!bestPort) {
        console.error(chalk.red('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°'));
        console.log(chalk.gray('üí° ‡πÉ‡∏ä‡πâ --port ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏∏‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÄ‡∏≠‡∏á ‡∏´‡∏£‡∏∑‡∏≠ list-ports ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏ó‡∏µ‡πà‡∏°‡∏µ'));
        process.exit(1);
      }
      
      portPath = bestPort.path;
      console.log(chalk.green(`‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏≠‡∏£‡πå‡∏ï: ${portPath} (${bestPort.confidence})`));
    }

    // Test port connection first and get reusable port
    console.log(chalk.gray('üîó ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠...'));
    const connectionTest = await testPortConnection(portPath!, options.timeout, true);
    
    if (!connectionTest.success) {
      console.error(chalk.red(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏û‡∏≠‡∏£‡πå‡∏ï ${portPath}`));
      console.log(chalk.gray('üí° ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏≠‡∏∑‡πà‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'));
      process.exit(1);
    }

    // Create DS12 connection with reused port to prevent race condition
    const connectionConfig: any = {
      portPath: portPath!,
      timeout: 5000,
    };
    
    // Only add existingPort if it exists
    if (connectionTest.port) {
      connectionConfig.existingPort = connectionTest.port;
    }
    
    const connection = new DS12Connection(connectionConfig);

    console.log(chalk.gray('üîó ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå...'));
    await connection.connect();

    console.log(chalk.gray(`üì° ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å (0x81) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà ${slot}...`));
    const packet = buildUnlockPacket(slot);
    const result = await connection.sendCommand(packet);

    await connection.disconnect();

    // Manually close the port since we're using an existing port
    if (connectionTest.port && connectionTest.port.isOpen) {
      await new Promise<void>((resolve) => {
        connectionTest.port!.close((err) => {
          if (err) {
            console.warn(chalk.yellow(`‚ö†Ô∏è Warning: Failed to close port: ${err.message}`));
          }
          resolve();
        });
      });
    }

    if (!result.success) {
      console.error(chalk.red(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${result.error}`));
      
      // Provide specific error guidance
      if (result.error?.includes('timeout')) {
        console.log(chalk.gray('üí° ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠'));
      } else if (result.error?.includes('checksum')) {
        console.log(chalk.gray('üí° ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢ ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'));
      }
      
      process.exit(1);
    }

    // Success
    console.log(chalk.green(`\n‚úÖ ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà ${slot} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`));
    console.log(chalk.green('üîì ‡∏ä‡πà‡∏≠‡∏á‡∏¢‡∏≤‡∏ñ‡∏π‡∏Å‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß'));
    
    if (options.verbose && result.rawData) {
      console.log(chalk.gray(`\nRaw response: ${result.rawData.toString('hex')}`));
      console.log(chalk.gray(`Response parsed: ${JSON.stringify(result.response, null, 2)}`));
    }

    // Medical device logging
    const timestamp = new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' });
    console.log(chalk.gray(`\nMEDICAL: Slot ${slot} unlocked at ${timestamp}`));

  } catch (error) {
    console.error(chalk.red(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î: ${error}`));
    
    // Medical device error logging
    const timestamp = new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' });
    console.error(chalk.red(`MEDICAL: Unlock failed for slot ${slotNumber} at ${timestamp} - ${error}`));
    
    process.exit(1);
  }
}