"use strict";
/**
 * List Ports Command
 * Lists available serial ports with DS12/DS16 detection
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.listPortsCommand = listPortsCommand;
const chalk_1 = __importDefault(require("chalk"));
const cli_table3_1 = __importDefault(require("cli-table3"));
const port_detector_1 = require("../serial/port-detector");
async function listPortsCommand(options = {}) {
    console.log(chalk_1.default.blue('üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏≠‡∏ô‡∏∏‡∏Å‡∏£‡∏°...'));
    try {
        if (options.all) {
            // List all ports
            const result = await (0, port_detector_1.listAllPorts)();
            if (!result.success) {
                console.error(chalk_1.default.red(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${result.error}`));
                process.exit(1);
            }
            if (result.ports.length === 0) {
                console.log(chalk_1.default.yellow('‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏≠‡∏ô‡∏∏‡∏Å‡∏£‡∏°'));
                return;
            }
            console.log(chalk_1.default.green(`\n‚úÖ ‡∏û‡∏ö‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏≠‡∏ô‡∏∏‡∏Å‡∏£‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${result.ports.length} ‡∏û‡∏≠‡∏£‡πå‡∏ï:`));
            if (options.verbose) {
                displayVerboseTable(result.ports);
            }
            else {
                displaySimpleTable(result.ports);
            }
        }
        else {
            // List only DS12/DS16 candidates
            const result = await (0, port_detector_1.detectDS12Ports)();
            if (!result.success) {
                console.error(chalk_1.default.red(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${result.error}`));
                process.exit(1);
            }
            if (result.ports.length === 0) {
                console.log(chalk_1.default.yellow('‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö DS12/DS16'));
                console.log(chalk_1.default.gray('üí° ‡πÉ‡∏ä‡πâ --all ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'));
                return;
            }
            console.log(chalk_1.default.green(`\n‚úÖ ‡∏û‡∏ö‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö DS12/DS16:`));
            console.log((0, port_detector_1.formatPortList)(result.ports));
            if (options.verbose) {
                displayVerboseTable(result.ports);
            }
        }
    }
    catch (error) {
        console.error(chalk_1.default.red(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î: ${error}`));
        process.exit(1);
    }
}
function displaySimpleTable(ports) {
    const table = new cli_table3_1.default({
        head: [
            chalk_1.default.cyan('‡∏û‡∏≠‡∏£‡πå‡∏ï'),
            chalk_1.default.cyan('‡∏ú‡∏π‡πâ‡∏ú‡∏•‡∏¥‡∏ï'),
            chalk_1.default.cyan('‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô')
        ],
        style: { head: [], border: [] }
    });
    ports.forEach(port => {
        const confidence = port.confidence || 'unknown';
        const confidenceMap = {
            high: chalk_1.default.green('‡∏™‡∏π‡∏á'),
            medium: chalk_1.default.yellow('‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á'),
            low: chalk_1.default.red('‡∏ï‡πà‡∏≥'),
            unknown: chalk_1.default.gray('‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö')
        };
        const confidenceColor = confidenceMap[confidence];
        table.push([
            chalk_1.default.white(port.path),
            chalk_1.default.gray(port.manufacturer || '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö'),
            confidenceColor
        ]);
    });
    console.log(table.toString());
}
function displayVerboseTable(ports) {
    const table = new cli_table3_1.default({
        head: [
            chalk_1.default.cyan('‡∏û‡∏≠‡∏£‡πå‡∏ï'),
            chalk_1.default.cyan('‡∏ú‡∏π‡πâ‡∏ú‡∏•‡∏¥‡∏ï'),
            chalk_1.default.cyan('Serial Number'),
            chalk_1.default.cyan('Vendor ID'),
            chalk_1.default.cyan('Product ID'),
            chalk_1.default.cyan('‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô'),
            chalk_1.default.cyan('‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•')
        ],
        style: { head: [], border: [] }
    });
    ports.forEach(port => {
        const confidence = port.confidence || 'unknown';
        const confidenceMap = {
            high: chalk_1.default.green('‡∏™‡∏π‡∏á'),
            medium: chalk_1.default.yellow('‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á'),
            low: chalk_1.default.red('‡∏ï‡πà‡∏≥'),
            unknown: chalk_1.default.gray('‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö')
        };
        const confidenceColor = confidenceMap[confidence];
        table.push([
            chalk_1.default.white(port.path),
            chalk_1.default.gray(port.manufacturer || '-'),
            chalk_1.default.gray(port.serialNumber || '-'),
            chalk_1.default.gray(port.vendorId || '-'),
            chalk_1.default.gray(port.productId || '-'),
            confidenceColor,
            chalk_1.default.gray(port.reason || '-')
        ]);
    });
    console.log(table.toString());
}
//# sourceMappingURL=list-ports.js.map