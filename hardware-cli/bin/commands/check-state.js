"use strict";
/**
 * Check State Command
 * Checks DS12/DS16 slot states using raw 0x80 command
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkStateCommand = checkStateCommand;
const chalk_1 = __importDefault(require("chalk"));
const cli_table3_1 = __importDefault(require("cli-table3"));
const connection_1 = require("../serial/connection");
const packet_builder_1 = require("../protocol/packet-builder");
const parser_1 = require("../protocol/parser");
const port_detector_1 = require("../serial/port-detector");
async function checkStateCommand(options = {}) {
    console.log(chalk_1.default.blue("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ä‡πà‡∏≠‡∏á‡∏¢‡∏≤..."));
    try {
        // Determine which port to use
        let portPath = options.port;
        if (!portPath) {
            console.log(chalk_1.default.gray("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥..."));
            const bestPort = await (0, port_detector_1.getBestPort)();
            if (!bestPort) {
                console.error(chalk_1.default.red("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°"));
                console.log(chalk_1.default.gray("üí° ‡πÉ‡∏ä‡πâ --port ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏∏‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÄ‡∏≠‡∏á ‡∏´‡∏£‡∏∑‡∏≠ list-ports ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏ó‡∏µ‡πà‡∏°‡∏µ"));
                process.exit(1);
            }
            portPath = bestPort.path;
            console.log(chalk_1.default.green(`‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏≠‡∏£‡πå‡∏ï: ${portPath} (${bestPort.confidence})`));
        }
        // Test port connection first
        console.log(chalk_1.default.gray("üîó ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠..."));
        const canConnect = await (0, port_detector_1.testPortConnection)(portPath, options.timeout);
        console.log("DEBUG: Port connection test result:", canConnect);
        if (!canConnect) {
            console.error(chalk_1.default.red(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏û‡∏≠‡∏£‡πå‡∏ï ${portPath}`));
            console.log(chalk_1.default.gray("üí° ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏≠‡∏∑‡πà‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"));
            process.exit(1);
        }
        // Create connection and send status request
        const connection = new connection_1.DS12Connection({
            portPath: portPath,
            timeout: options.timeout || 3000,
        });
        console.log("DEBUG: Port path:", portPath);
        console.log(chalk_1.default.gray("üîó ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå..."));
        await connection.connect();
        console.log(chalk_1.default.gray("üì° ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (0x80)..."));
        const packet = (0, packet_builder_1.buildStatusRequestPacket)();
        console.log("‡∏™‡πà‡∏á package : ", packet);
        const result = await connection.sendCommand(packet);
        console.log("‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö response : ", result);
        await connection.disconnect();
        if (!result.success) {
            console.error(chalk_1.default.red(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${result.error}`));
            process.exit(1);
        }
        if (!result.response || !result.response.slotStates) {
            console.error(chalk_1.default.red("‚ùå ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ä‡πà‡∏≠‡∏á‡∏¢‡∏≤"));
            process.exit(1);
        }
        // Display results
        console.log(chalk_1.default.green("\n‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"));
        if (options.verbose) {
            displayVerboseSlotTable(result.response.slotStates);
            console.log(chalk_1.default.gray(`\nRaw response: ${result.rawData?.toString("hex")}`));
        }
        else {
            console.log("\n" + (0, parser_1.formatSlotStates)(result.response.slotStates));
            displaySimpleSlotTable(result.response.slotStates);
        }
    }
    catch (error) {
        console.error(chalk_1.default.red(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î: ${error}`));
        process.exit(1);
    }
}
function displaySimpleSlotTable(slotStates) {
    const table = new cli_table3_1.default({
        head: [chalk_1.default.cyan("‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà"), chalk_1.default.cyan("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"), chalk_1.default.cyan("‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå")],
        style: { head: [], border: [] },
    });
    slotStates.forEach((slot) => {
        const statusText = slot.isOpen ? "‡πÄ‡∏õ‡∏¥‡∏î" : "‡∏õ‡∏¥‡∏î";
        const statusColor = slot.isOpen
            ? chalk_1.default.red(statusText)
            : chalk_1.default.green(statusText);
        const icon = slot.isOpen ? "üîì" : "üîí";
        table.push([chalk_1.default.white(slot.slotNumber.toString()), statusColor, icon]);
    });
    console.log(table.toString());
}
function displayVerboseSlotTable(slotStates) {
    const table = new cli_table3_1.default({
        head: [
            chalk_1.default.cyan("‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà"),
            chalk_1.default.cyan("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"),
            chalk_1.default.cyan("‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î"),
            chalk_1.default.cyan("‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå"),
            chalk_1.default.cyan("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏"),
        ],
        style: { head: [], border: [] },
    });
    slotStates.forEach((slot) => {
        const statusText = slot.status;
        const statusColor = slot.isOpen
            ? chalk_1.default.red(statusText)
            : chalk_1.default.green(statusText);
        const openText = slot.isOpen ? "true" : "false";
        const openColor = slot.isOpen ? chalk_1.default.red(openText) : chalk_1.default.green(openText);
        const icon = slot.isOpen ? "üîì" : "üîí";
        const note = slot.isOpen ? "‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö" : "‡∏õ‡∏Å‡∏ï‡∏¥";
        table.push([
            chalk_1.default.white(slot.slotNumber.toString()),
            statusColor,
            openColor,
            icon,
            chalk_1.default.gray(note),
        ]);
    });
    console.log(table.toString());
}
//# sourceMappingURL=check-state.js.map