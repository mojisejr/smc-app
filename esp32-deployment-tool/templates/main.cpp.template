/*
 * ESP32 Customer Configuration
 * Organization: {{ORGANIZATION}}
 * Customer ID: {{CUSTOMER_ID}}
 * Application: {{APPLICATION_NAME}}
 * Generated: {{GENERATED_DATE}}
 */

#include <WiFi.h>
#include <ESPAsyncWebServer.h>
#include <ArduinoJson.h>
#include <Wire.h>
#include <Adafruit_SHT31.h>

// Customer Configuration
const char* CUSTOMER_ORG = "{{ORGANIZATION}}";
const char* CUSTOMER_ID = "{{CUSTOMER_ID}}";  
const char* APPLICATION_NAME = "{{APPLICATION_NAME}}";

// SHT30 I2C Sensor Configuration for ESP32-S3 (Fixed pins for all devices)
#define I2C_SDA_PIN 8      // GPIO 8 - SDA pin for ESP32-S3
#define I2C_SCL_PIN 9      // GPIO 9 - SCL pin for ESP32-S3
Adafruit_SHT31 sht31 = Adafruit_SHT31();

// Sensor status tracking
bool sensorAvailable = false;
String sensorMode = "unknown";

// WiFi Access Point Configuration
const char* AP_SSID = "{{WIFI_SSID}}";
const char* AP_PASSWORD = "{{WIFI_PASSWORD}}";
IPAddress local_ip(192, 168, 4, 1);
IPAddress gateway(192, 168, 4, 1);
IPAddress subnet(255, 255, 255, 0);

// Create AsyncWebServer object on port 80
AsyncWebServer server(80);

void setup() {
  Serial.begin(115200);
  Serial.println();
  Serial.println("========================================");
  Serial.println("SMC ESP32 Customer Configuration");
  Serial.printf("Customer: %s (%s)\n", CUSTOMER_ORG, CUSTOMER_ID);
  Serial.printf("Application: %s\n", APPLICATION_NAME);
  Serial.println("========================================");
  
  // Initialize Wi-Fi
  Serial.println("Starting WiFi Access Point...");
  WiFi.mode(WIFI_AP);
  WiFi.softAPConfig(local_ip, gateway, subnet);
  WiFi.softAP(AP_SSID, AP_PASSWORD);
  
  Serial.printf("AP SSID: %s\n", AP_SSID);
  Serial.printf("AP IP Address: %s\n", WiFi.softAPIP().toString().c_str());
  Serial.printf("MAC Address: %s\n", WiFi.macAddress().c_str());
  
  // Initialize I2C for SHT30 Sensor - Medical Device Compliance
  Serial.println("MEDICAL: Initializing SHT30 I2C Temperature/Humidity Sensor...");
  Wire.begin(I2C_SDA_PIN, I2C_SCL_PIN);
  Wire.setClock(100000); // Set I2C clock to 100kHz for stable communication
  Serial.printf("HARDWARE: I2C Pins configured - SDA=GPIO%d, SCL=GPIO%d, Clock=100kHz\n", I2C_SDA_PIN, I2C_SCL_PIN);
  
  // Medical Device Sensor Validation with Retry Logic
  Serial.println("MEDICAL: Testing sensor connectivity with retry mechanism...");
  delay(1000); // Wait for I2C to stabilize
  
  bool sensorInitialized = false;
  int retryCount = 0;
  const int maxRetries = 3;
  
  // Retry loop for medical device reliability
  while (!sensorInitialized && retryCount < maxRetries) {
    retryCount++;
    Serial.printf("MEDICAL: Sensor initialization attempt %d/%d\n", retryCount, maxRetries);
    
    if (sht31.begin(0x44)) {
      delay(500); // Allow sensor to stabilize after initialization
      
      // Perform comprehensive sensor validation
      float temp = sht31.readTemperature();
      float humidity = sht31.readHumidity();
      
      // Medical device range validation (extended for safety)
      if (!isnan(temp) && !isnan(humidity) && 
          temp >= -40.0 && temp <= 85.0 &&     // SHT30 operating range
          humidity >= 0.0 && humidity <= 100.0) {
        
        sensorInitialized = true;
        sensorAvailable = true;
        sensorMode = "live";
        Serial.println("MEDICAL: ✅ SHT30 sensor validated and operational");
        Serial.printf("MEDICAL: Initial reading validated - Temp: %.2f°C, Humidity: %.2f%%RH\n", temp, humidity);
        Serial.printf("MEDICAL: Sensor status - Address: 0x44, Mode: Live, Retry: %d\n", retryCount);
      } else {
        Serial.printf("ERROR: Sensor reading validation failed - Temp: %.2f, Humidity: %.2f\n", temp, humidity);
        delay(1000); // Wait before retry
      }
    } else {
      Serial.printf("ERROR: I2C communication failed on attempt %d\n", retryCount);
      delay(1000); // Wait before retry
    }
  }
  
  // Final sensor status determination
  if (!sensorInitialized) {
    sensorAvailable = false;
    sensorMode = "mock";
    Serial.println("ERROR: SHT30 sensor initialization failed after all retry attempts");
    Serial.println("MEDICAL: Switching to mock data mode for system demonstration");
    Serial.println("MEDICAL: ⚠️  Hardware validation required before medical use");
  }

  // Configure CORS
  DefaultHeaders::Instance().addHeader("Access-Control-Allow-Origin", "*");
  DefaultHeaders::Instance().addHeader("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS");
  DefaultHeaders::Instance().addHeader("Access-Control-Allow-Headers", "*");

  // Root endpoint
  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request) {
    String html = "<!DOCTYPE html><html><head><title>SMC ESP32 - " + String(CUSTOMER_ORG) + "</title></head>";
    html += "<body style='font-family: Arial; padding: 20px;'>";
    html += "<h1>SMC Medical Device Configuration</h1>";
    html += "<div style='background: #f0f0f0; padding: 15px; border-radius: 5px;'>";
    html += "<h3>Customer Information</h3>";
    html += "<p><strong>Organization:</strong> " + String(CUSTOMER_ORG) + "</p>";
    html += "<p><strong>Customer ID:</strong> " + String(CUSTOMER_ID) + "</p>";
    html += "<p><strong>Application:</strong> " + String(APPLICATION_NAME) + "</p>";
    html += "<p><strong>MAC Address:</strong> " + WiFi.macAddress() + "</p>";
    html += "</div></body></html>";
    
    request->send(200, "text/html", html);
  });

  // MAC endpoint
  server.on("/mac", HTTP_GET, [](AsyncWebServerRequest *request) {
    JsonDocument doc;
    doc["mac_address"] = WiFi.macAddress();
    doc["customer_id"] = CUSTOMER_ID;
    doc["organization"] = CUSTOMER_ORG;
    doc["status"] = "success";
    doc["timestamp"] = millis();
    
    String jsonString;
    serializeJson(doc, jsonString);
    request->send(200, "application/json", jsonString);
  });

  // Info endpoint  
  server.on("/info", HTTP_GET, [](AsyncWebServerRequest *request) {
    JsonDocument doc;
    JsonObject deviceObj = doc["device"].to<JsonObject>();
    deviceObj["type"] = "ESP32";
    deviceObj["mac_address"] = WiFi.macAddress();
    deviceObj["ap_ip"] = WiFi.softAPIP().toString();
    deviceObj["ap_ssid"] = AP_SSID;
    
    JsonObject customerObj = doc["customer"].to<JsonObject>();
    customerObj["organization"] = CUSTOMER_ORG;
    customerObj["customer_id"] = CUSTOMER_ID;
    customerObj["application"] = APPLICATION_NAME;
    
    String jsonString;
    serializeJson(doc, jsonString);
    request->send(200, "application/json", jsonString);
  });

  // Sensor endpoint - SHT30 I2C Temperature/Humidity 
  server.on("/sensor", HTTP_GET, [](AsyncWebServerRequest *request) {
    JsonDocument doc;
    
    float temperature, humidity;
    String currentMode;
    
    if (sensorAvailable) {
      // Try to read from real sensor
      temperature = sht31.readTemperature();
      humidity = sht31.readHumidity();
      
      // Validate sensor readings
      if (!isnan(temperature) && !isnan(humidity) && 
          temperature > -40 && temperature < 80 && 
          humidity >= 0 && humidity <= 100) {
        // Real sensor data is valid
        currentMode = "live";
        Serial.printf("Live sensor: %.1f°C, %.1f%%RH\n", temperature, humidity);
      } else {
        // Sensor failed this reading, use fallback
        temperature = 22.5 + random(-25, 25) / 10.0;
        humidity = 65.0 + random(-15, 15) / 10.0;
        currentMode = "mock_fallback";
        Serial.println("Sensor failed, using fallback data");
      }
    } else {
      // No sensor available, use mock data
      temperature = 22.5 + random(-25, 25) / 10.0;
      humidity = 65.0 + random(-15, 15) / 10.0;
      currentMode = "mock";
    }
    
    // Build JSON response with enhanced status information
    doc["temp"] = round(temperature * 10) / 10.0; // Round to 1 decimal
    doc["humid"] = round(humidity * 10) / 10.0;   // Round to 1 decimal
    doc["sensor"] = "SHT30";
    doc["mode"] = currentMode;
    doc["sensor_available"] = sensorAvailable;
    doc["timestamp"] = millis();
    doc["customer_id"] = CUSTOMER_ID;
    
    String jsonString;
    serializeJson(doc, jsonString);
    request->send(200, "application/json", jsonString);
  });

  // Health endpoint
  server.on("/health", HTTP_GET, [](AsyncWebServerRequest *request) {
    JsonDocument doc;
    JsonObject serverObj = doc["server"].to<JsonObject>();
    serverObj["status"] = "healthy";
    serverObj["uptime_ms"] = millis();
    serverObj["connected_clients"] = WiFi.softAPgetStationNum();
    
    String jsonString;
    serializeJson(doc, jsonString);
    request->send(200, "application/json", jsonString);
  });

  // Start server
  Serial.println("Starting HTTP server...");
  server.begin();
  Serial.println("Server started successfully!");
  Serial.println("Ready for client connections.");
}

void loop() {
  // Status reporting
  static unsigned long lastStatus = 0;
  if (millis() - lastStatus > 30000) {
    Serial.printf("[%s] Status: %d clients, %d bytes free\n", 
                  CUSTOMER_ID, WiFi.softAPgetStationNum(), ESP.getFreeHeap());
    lastStatus = millis();
  }
  
  delay(1000);
}