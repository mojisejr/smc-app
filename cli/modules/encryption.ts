import crypto from 'crypto';
import chalk from 'chalk';
import { LicenseData, LicenseFile, EncryptionConfig } from '../types';

/**
 * Encryption Module for SMC License System
 * 
 * ‡πÉ‡∏ä‡πâ AES-256-CBC ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™ license data
 * ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà Base64 encoding ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°
 */

// Shared secret key ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö encrypt/decrypt
// ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á key ‡∏ô‡∏µ‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏ñ‡∏π‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
const SHARED_SECRET_KEY = 'SMC_LICENSE_ENCRYPTION_KEY_2024_SECURE_MEDICAL_DEVICE_BINDING_32CHARS';

// Pre-computed key ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö performance optimization
const PRECOMPUTED_KEY = crypto.createHash('sha256').update(SHARED_SECRET_KEY).digest('hex').slice(0, 32);

// Encryption configuration
const ENCRYPTION_CONFIG: EncryptionConfig = {
  algorithm: 'aes-256-cbc',
  key: PRECOMPUTED_KEY, // ‡πÉ‡∏ä‡πâ pre-computed key ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£ hash ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
  iv_length: 16 // 16 bytes IV for AES
};

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á IV (Initialization Vector) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö AES encryption
 */
function generateIV(): Buffer {
  return crypto.randomBytes(ENCRYPTION_CONFIG.iv_length);
}

/**
 * ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• license ‡∏î‡πâ‡∏ß‡∏¢ AES-256-CBC
 * 
 * @param data - License data object
 * @returns Encrypted string (Base64)
 */
export function encryptLicenseData(data: LicenseData): string {
  try {
    console.log(chalk.blue('üîê Encrypting license data...'));
    
    // Convert license data ‡πÄ‡∏õ‡πá‡∏ô JSON string (compact format ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö performance)
    const jsonString = JSON.stringify(data, null, 0);
    console.log(chalk.gray(`   Data size: ${jsonString.length} bytes`));
    
    // Generate random IV
    const iv = generateIV();
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á cipher ‡∏î‡πâ‡∏ß‡∏¢ createCipheriv (‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà deprecated createCipher)
    const cipher = crypto.createCipheriv(ENCRYPTION_CONFIG.algorithm, ENCRYPTION_CONFIG.key, iv);
    
    // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    let encrypted = cipher.update(jsonString, 'utf8', 'hex');
    encrypted += cipher.final('hex');
    
    // ‡∏£‡∏ß‡∏° IV ‡∏Å‡∏±‡∏ö encrypted data (IV:ENCRYPTED_DATA)
    const result = iv.toString('hex') + ':' + encrypted;
    
    console.log(chalk.green(`   ‚úÖ Encryption successful`));
    console.log(chalk.gray(`   Encrypted size: ${result.length} characters`));
    
    return Buffer.from(result).toString('base64'); // Convert ‡πÄ‡∏õ‡πá‡∏ô Base64 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏î‡∏ß‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö
    
  } catch (error: any) {
    console.log(chalk.red(`   ‚ùå Encryption failed: ${error.message}`));
    throw new Error(`License encryption failed: ${error.message}`);
  }
}

/**
 * ‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• license ‡∏î‡πâ‡∏ß‡∏¢ AES-256-CBC
 * 
 * @param encryptedData - Encrypted string (Base64)
 * @returns License data object
 */
export function decryptLicenseData(encryptedData: string): LicenseData {
  try {
    console.log(chalk.blue('üîì Decrypting license data...'));
    
    // Decode ‡∏à‡∏≤‡∏Å Base64
    const hexData = Buffer.from(encryptedData, 'base64').toString('utf8');
    
    // ‡πÅ‡∏¢‡∏Å IV ‡∏Å‡∏±‡∏ö encrypted data
    const parts = hexData.split(':');
    if (parts.length !== 2) {
      throw new Error('Invalid encrypted data format');
    }
    
    const iv = Buffer.from(parts[0], 'hex');
    const encrypted = parts[1];
    
    console.log(chalk.gray(`   IV length: ${iv.length} bytes`));
    console.log(chalk.gray(`   Data length: ${encrypted.length} characters`));
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á decipher ‡∏î‡πâ‡∏ß‡∏¢ createDecipheriv (‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà deprecated createDecipher)
    const decipher = crypto.createDecipheriv(ENCRYPTION_CONFIG.algorithm, ENCRYPTION_CONFIG.key, iv);
    
    // ‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    let decrypted = decipher.update(encrypted, 'hex', 'utf8');
    decrypted += decipher.final('utf8');
    
    // Parse JSON
    const licenseData = JSON.parse(decrypted);
    
    console.log(chalk.green(`   ‚úÖ Decryption successful`));
    console.log(chalk.gray(`   Organization: ${licenseData.organization}`));
    
    return licenseData as LicenseData;
    
  } catch (error: any) {
    console.log(chalk.red(`   ‚ùå Decryption failed: ${error.message}`));
    throw new Error(`License decryption failed: ${error.message}`);
  }
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á license data object ‡∏à‡∏≤‡∏Å input parameters
 * 
 * @param options - License generation options
 * @param macAddress - MAC address from ESP32
 * @returns LicenseData object
 */
export function createLicenseData(
  options: {
    org: string;
    customer: string;
    app: string;
    expiry: string;
  },
  macAddress: string
): LicenseData {
  
  console.log(chalk.blue('üìù Creating license data structure...'));
  
  // Validate expiry date format (YYYY-MM-DD)
  const expiryRegex = /^\d{4}-\d{2}-\d{2}$/;
  if (!expiryRegex.test(options.expiry)) {
    throw new Error('Invalid expiry date format. Use YYYY-MM-DD');
  }
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏≠‡∏î‡∏µ‡∏ï
  const expiryDate = new Date(options.expiry);
  const today = new Date();
  today.setHours(0, 0, 0, 0); // Reset time to beginning of day
  
  if (expiryDate < today) {
    throw new Error('Expiry date cannot be in the past');
  }
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á license data
  const licenseData: LicenseData = {
    organization: options.org.trim(),
    customerId: options.customer.trim(),
    applicationId: options.app.trim(),
    generatedAt: new Date().toISOString(),
    expiryDate: options.expiry,
    macAddress: macAddress.toUpperCase(), // Normalize MAC address ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡∏ç‡πà
    version: '1.0.0',
    checksum: '' // ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ô‡∏µ‡πâ
  };
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á checksum ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö verification
  const checksumData = `${licenseData.organization}${licenseData.customerId}${licenseData.applicationId}${licenseData.expiryDate}${licenseData.macAddress}`;
  licenseData.checksum = crypto.createHash('sha256').update(checksumData).digest('hex').slice(0, 16);
  
  console.log(chalk.green('   ‚úÖ License data created'));
  console.log(chalk.gray(`   Organization: ${licenseData.organization}`));
  console.log(chalk.gray(`   Customer ID: ${licenseData.customerId}`));
  console.log(chalk.gray(`   Application: ${licenseData.applicationId}`));
  console.log(chalk.gray(`   Expiry: ${licenseData.expiryDate}`));
  console.log(chalk.gray(`   MAC Address: ${licenseData.macAddress}`));
  console.log(chalk.gray(`   Checksum: ${licenseData.checksum}`));
  
  return licenseData;
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á license file structure ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
 * 
 * @param licenseData - License data object
 * @returns LicenseFile object
 */
export function createLicenseFile(licenseData: LicenseData): LicenseFile {
  console.log(chalk.blue('üìÑ Creating license file structure...'));
  
  // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™ license data
  const encryptedData = encryptLicenseData(licenseData);
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á license file structure
  const licenseFile: LicenseFile = {
    version: '1.0.0',
    encrypted_data: encryptedData,
    algorithm: ENCRYPTION_CONFIG.algorithm,
    created_at: new Date().toISOString()
  };
  
  console.log(chalk.green('   ‚úÖ License file structure created'));
  console.log(chalk.gray(`   Format version: ${licenseFile.version}`));
  console.log(chalk.gray(`   Algorithm: ${licenseFile.algorithm}`));
  console.log(chalk.gray(`   Created at: ${licenseFile.created_at}`));
  
  return licenseFile;
}

/**
 * ‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡∏∞ parse license file
 * 
 * @param licenseFileContent - License file content (JSON string)
 * @returns LicenseData object
 */
export function parseLicenseFile(licenseFileContent: string): LicenseData {
  try {
    console.log(chalk.blue('üìñ Parsing license file...'));
    
    // Parse JSON
    const licenseFile = JSON.parse(licenseFileContent) as LicenseFile;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö version compatibility
    if (licenseFile.version !== '1.0.0') {
      console.log(chalk.yellow(`   ‚ö†Ô∏è  Warning: License file version ${licenseFile.version} may not be compatible`));
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö algorithm
    if (licenseFile.algorithm !== ENCRYPTION_CONFIG.algorithm) {
      throw new Error(`Unsupported encryption algorithm: ${licenseFile.algorithm}`);
    }
    
    console.log(chalk.gray(`   File version: ${licenseFile.version}`));
    console.log(chalk.gray(`   Algorithm: ${licenseFile.algorithm}`));
    console.log(chalk.gray(`   Created: ${licenseFile.created_at}`));
    
    // ‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™ license data
    const licenseData = decryptLicenseData(licenseFile.encrypted_data);
    
    console.log(chalk.green('   ‚úÖ License file parsed successfully'));
    
    return licenseData;
    
  } catch (error: any) {
    console.log(chalk.red(`   ‚ùå License file parsing failed: ${error.message}`));
    throw new Error(`Invalid license file: ${error.message}`);
  }
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á license data
 * 
 * @param licenseData - License data to validate
 * @returns true if valid, throws error if invalid
 */
export function validateLicenseData(licenseData: LicenseData): boolean {
  console.log(chalk.blue('‚úÖ Validating license data...'));
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö required fields
  const requiredFields = ['organization', 'customerId', 'applicationId', 'expiryDate', 'macAddress'];
  for (const field of requiredFields) {
    if (!licenseData[field as keyof LicenseData]) {
      throw new Error(`Missing required field: ${field}`);
    }
  }
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö expiry date
  const expiryDate = new Date(licenseData.expiryDate);
  const today = new Date();
  
  if (expiryDate < today) {
    throw new Error('License has expired');
  }
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö checksum ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
  if (licenseData.checksum) {
    const checksumData = `${licenseData.organization}${licenseData.customerId}${licenseData.applicationId}${licenseData.expiryDate}${licenseData.macAddress}`;
    const expectedChecksum = crypto.createHash('sha256').update(checksumData).digest('hex').slice(0, 16);
    
    if (licenseData.checksum !== expectedChecksum) {
      throw new Error('License data integrity check failed');
    }
  }
  
  console.log(chalk.green('   ‚úÖ License data validation passed'));
  console.log(chalk.gray(`   Valid until: ${licenseData.expiryDate}`));
  
  return true;
}