[
    {
        "id": "dba0e1f7a72441bb",
        "type": "tab",
        "label": "KU16-Controller",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b0aa6540f800b82a",
        "type": "serial in",
        "z": "dba0e1f7a72441bb",
        "name": "KU16-Rx",
        "serial": "05697e61e7f516ca",
        "x": 440,
        "y": 780,
        "wires": [
            [
                "e745c37a70380ccc"
            ]
        ]
    },
    {
        "id": "aef428f8af172818",
        "type": "serial out",
        "z": "dba0e1f7a72441bb",
        "name": "KU16-Tx",
        "serial": "05697e61e7f516ca",
        "x": 1380,
        "y": 860,
        "wires": [],
        "info": "# Serial Port Comunication Endpoint\n\nตัวส่งคำสั่งออกไปที่ SerialPort"
    },
    {
        "id": "9681067d13d2b557",
        "type": "function",
        "z": "dba0e1f7a72441bb",
        "name": "CSS",
        "func": "let checkstate = [0x02, 0x00, 0x30, 0x03, 0x35];\nmsg.payload = Buffer.from(checkstate);\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 860,
        "wires": [
            [
                "aef428f8af172818"
            ]
        ]
    },
    {
        "id": "95017ff6205466fe",
        "type": "function",
        "z": "dba0e1f7a72441bb",
        "name": "executor",
        "func": "let commands = [\n    {\n        channel: 0,\n        channelNo: 1,\n        unlock: [0x02, 0x00, 0x31, 0x03, 0x36],\n        closedStateBit: [0x07],\n        openedStateBit: [0x06],\n        byteIndex: [3],\n    },\n        {\n        channel: 1,\n        channelNo: 2,\n        unlock: [0x02, 0x01, 0x31, 0x03, 0x37],\n        openedStateBit: [0x05],\n        closedStateBit: [0x06],\n        byteIndex: [3],\n    },\n    {\n        channel: 2,\n        channelNo: 3,\n        unlock: [0x02, 0x02, 0x31, 0x03, 0x38],\n        closedStateBit: [0x03],\n        openedStateBit: [0x06],\n        byteIndex: [3],\n    },\n    {\n        channel: 3,\n        channelNo: 4,\n        unlock: [0x02, 0x03, 0x31, 0x03, 0x39],\n        closedStateBit: 1,\n        openedStateBit: 0,\n    },\n    {\n        channel: 4,\n        channelNo: 5,\n        unlock: [0x02, 0x04, 0x31, 0x03, 0x3a],\n        closedStateBit: 1,\n        openedStateBit: 0,\n    },\n    {\n        channel: 5,\n        channelNo: 6,\n        unlock: [0x02, 0x05, 0x31, 0x03, 0x3b],\n        closedStateBit: 1,\n        openedStateBit: 0,\n    },\n    {\n        channel: 6,\n        channelNo: 7,\n        unlock: [0x02, 0x06, 0x31, 0x03, 0x3c],\n        closedStateBit: 1,\n        openedStateBit: 0,\n    },\n    {\n        channel: 7,\n        channelNo: 8,\n        unlock: [0x02, 0x07, 0x31, 0x03, 0x3d],\n        closedStateBit: 1,\n        openedStateBit: 0,\n    },\n    {\n        channel: 8,\n        channelNo: 9,\n        unlock: [0x02, 0x08, 0x31, 0x03, 0x3e],\n        closedStateBit: 1,\n        openedStateBit: 0,\n    },\n    {\n        channel: 9,\n        channelNo: 10,\n        unlock: [0x02, 0x09, 0x31, 0x03, 0x3f],\n        closedStateBit: 1,\n        openedStateBit: 0,\n    },\n    {\n        channel: 10,\n        channelNo: 11,\n        unlock: [0x02, 0x0a, 0x31, 0x03, 0x40],\n        closedStateBit: 1,\n        openedStateBit: 0,\n    },\n    {\n        channel: 11,\n        channelNo: 12,\n        unlock: [0x02, 0x0b, 0x31, 0x03, 0x41],\n        closedStateBit: 1,\n        openedStateBit: 0,\n    },\n    {\n        channel: 12,\n        channelNo: 13,\n        unlock: [0x02, 0x0c, 0x31, 0x03, 0x42],\n        closedStateBit: 1,\n        openedStateBit: 0,\n    },\n    {\n        channel: 13,\n        channelNo: 14,\n        unlock: [0x02, 0x0d, 0x31, 0x03, 0x43],\n        closedStateBit: 1,\n        openedStateBit: 0,\n    },\n    {\n        channel: 14,\n        channelNo: 15,\n        unlock: [0x02, 0x0e, 0x31, 0x03, 0x44],\n        closedStateBit: 1,\n        openedStateBit: 0,\n    },\n    {\n        channel: 15,\n        channelNo: 16,\n        unlock: [0x02, 0x0f, 0x31, 0x03, 0x45],\n        closedStateBit: 1,\n        openedStateBit: 0,\n    },\n]\n\nlet slot = commands[msg.payload.slot - 1]\nmsg.payload = { ...msg.payload, command: Buffer.from(slot.unlock) };\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 920,
        "wires": [
            [
                "d761a54a7d2f456b",
                "dc0f2adc6a931ab9",
                "e9b5fbd42ec45660"
            ]
        ],
        "info": "# Executor\n"
    },
    {
        "id": "0c89576ca43efd76",
        "type": "trigger",
        "z": "dba0e1f7a72441bb",
        "name": "check-interval",
        "op1": "",
        "op2": "0",
        "op1type": "pay",
        "op2type": "str",
        "duration": "-1",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "31",
        "bytopic": "all",
        "topic": "payload.state",
        "outputs": 1,
        "x": 1000,
        "y": 840,
        "wires": [
            [
                "9681067d13d2b557"
            ]
        ]
    },
    {
        "id": "dc0f2adc6a931ab9",
        "type": "delay",
        "z": "dba0e1f7a72441bb",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1000,
        "y": 900,
        "wires": [
            [
                "9681067d13d2b557"
            ]
        ]
    },
    {
        "id": "7d2455d65ca50e33",
        "type": "delay",
        "z": "dba0e1f7a72441bb",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 820,
        "y": 780,
        "wires": [
            [
                "0c89576ca43efd76",
                "5014fb66742455c8"
            ]
        ]
    },
    {
        "id": "765611545f649527",
        "type": "mqtt out",
        "z": "dba0e1f7a72441bb",
        "name": "",
        "topic": "ku_states",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8fbde230d2e3fc73",
        "x": 2000,
        "y": 700,
        "wires": []
    },
    {
        "id": "5014fb66742455c8",
        "type": "switch",
        "z": "dba0e1f7a72441bb",
        "name": "O/C",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "31",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "31",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 970,
        "y": 780,
        "wires": [
            [
                "316e29e0e3b49a4e",
                "8b74e81db129d18a"
            ],
            [
                "c5c2215e1fc13961"
            ]
        ],
        "info": "\n\n5 slots\n\nclose state will be\n\n31\n\nslot 1 open\n\nslot 2 open\n\nslot 3 open\n\nslot 4 open\n\nslot 5 open\n\nTODO: make it dynamic"
    },
    {
        "id": "faf48f17be5d850b",
        "type": "inject",
        "z": "dba0e1f7a72441bb",
        "name": "manual-tricker",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "{\"slot\":5,\"hn\":\"502034\",\"timestamp\":1694831412480}",
        "payloadType": "json",
        "x": 110,
        "y": 1140,
        "wires": [
            [
                "95017ff6205466fe",
                "288f649f71d72f61"
            ]
        ]
    },
    {
        "id": "9dc39b24f780290a",
        "type": "comment",
        "z": "dba0e1f7a72441bb",
        "name": "Slot State Documentation",
        "info": "### Slot State Documentation\n\nBit definition\n\nhigh Bit [128 64 32 16 8 4 2 1]\n\nKU16 returning package definition [3 slots connected example]\n\n1. All slots are closed\n    - `00000111` [3 slots available] and all closed\n    - output will be [7]\n\n2. Slot No. 1 open\n    - `00000110` slot number one is opening.\n    - output will be [6] (come from 0 + 2 + 4 from the logic high bit)\n3. Slot No. 2 open\n    - `00000101` slot number two is opening.\n    - output will be [5]\n4. Slot No. 3 open\n    - `00000011` slot number three is opening.\n    - output will be [3]\n\nfrom the example if all the slot is registered and available.\nthe closed data will be\n    - `11111111` so it is [1 + 2 + 4 + 8 + 16 + 32 + 64 + 128 = 255]\nso if the slot 1 is opening there will be\n    - `11111110` so it is [1 + 2 + 4 + 8 + 16 + 32 + 64 = 127]\n\njust like that!",
        "x": 150,
        "y": 40,
        "wires": []
    },
    {
        "id": "c5c2215e1fc13961",
        "type": "function",
        "z": "dba0e1f7a72441bb",
        "name": "OSP",
        "func": "msg.topic = `SELECT * FROM slot`;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 780,
        "wires": [
            [
                "ed9144569558f2fb"
            ]
        ]
    },
    {
        "id": "bb24d575e146fd56",
        "type": "debug",
        "z": "dba0e1f7a72441bb",
        "name": "ku-state",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2000,
        "y": 760,
        "wires": []
    },
    {
        "id": "62d5fe828371d298",
        "type": "mqtt in",
        "z": "dba0e1f7a72441bb",
        "name": "",
        "topic": "init",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "8fbde230d2e3fc73",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 70,
        "y": 820,
        "wires": [
            [
                "9681067d13d2b557"
            ]
        ]
    },
    {
        "id": "03e3df0c0f696618",
        "type": "sqlite",
        "z": "dba0e1f7a72441bb",
        "mydb": "7b1f540ae7b80b30",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "db",
        "x": 1250,
        "y": 1160,
        "wires": [
            [
                "4970b5430abe3510"
            ]
        ]
    },
    {
        "id": "4970b5430abe3510",
        "type": "debug",
        "z": "dba0e1f7a72441bb",
        "name": "database monitor",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1490,
        "y": 1140,
        "wires": []
    },
    {
        "id": "d761a54a7d2f456b",
        "type": "change",
        "z": "dba0e1f7a72441bb",
        "name": "cmd-sender",
        "rules": [
            {
                "t": "move",
                "p": "payload.command",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1010,
        "y": 1000,
        "wires": [
            [
                "ea972304b1b2b16a",
                "aef428f8af172818"
            ]
        ]
    },
    {
        "id": "e9b5fbd42ec45660",
        "type": "function",
        "z": "dba0e1f7a72441bb",
        "name": "upd-input-state",
        "func": "msg.topic = `UPDATE slot SET hn=${msg.payload.hn}, timestamp=${msg.payload.timestamp}, opening=true WHERE slotId=${msg.payload.slot}`;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 1200,
        "wires": [
            [
                "03e3df0c0f696618"
            ]
        ]
    },
    {
        "id": "ed9144569558f2fb",
        "type": "sqlite",
        "z": "dba0e1f7a72441bb",
        "mydb": "7b1f540ae7b80b30",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "db",
        "x": 1830,
        "y": 780,
        "wires": [
            [
                "765611545f649527",
                "bb24d575e146fd56"
            ]
        ]
    },
    {
        "id": "e745c37a70380ccc",
        "type": "function",
        "z": "dba0e1f7a72441bb",
        "name": "state-parser",
        "func": "let slotStates = msg.payload[3];\nmsg.payload = slotStates;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 780,
        "wires": [
            [
                "7d2455d65ca50e33",
                "8113b4c190c570d0"
            ]
        ]
    },
    {
        "id": "e8523811e1cffe4e",
        "type": "inject",
        "z": "dba0e1f7a72441bb",
        "name": "reset",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "UPDATE slot SET hn=\"\", opening=false, occupied=false, timestamp=0;",
        "x": 90,
        "y": 1080,
        "wires": [
            [
                "03e3df0c0f696618"
            ]
        ]
    },
    {
        "id": "f12c16727ec2e953",
        "type": "inject",
        "z": "dba0e1f7a72441bb",
        "name": "findAll",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "SELECT * FROM slot;",
        "x": 90,
        "y": 1020,
        "wires": [
            [
                "03e3df0c0f696618"
            ]
        ]
    },
    {
        "id": "316e29e0e3b49a4e",
        "type": "function",
        "z": "dba0e1f7a72441bb",
        "name": "get-opening",
        "func": "msg.topic = `SELECT * FROM slot WHERE opening=true`;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 680,
        "wires": [
            [
                "53259614e41c2cf9"
            ]
        ]
    },
    {
        "id": "53259614e41c2cf9",
        "type": "sqlite",
        "z": "dba0e1f7a72441bb",
        "mydb": "7b1f540ae7b80b30",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "db",
        "x": 1230,
        "y": 680,
        "wires": [
            [
                "8d881f89fae5e032",
                "0d26b39b82417ba1"
            ]
        ]
    },
    {
        "id": "8d881f89fae5e032",
        "type": "function",
        "z": "dba0e1f7a72441bb",
        "name": "update-closed",
        "func": "if(msg.payload[0] != undefined) {\n    msg.topic = `UPDATE slot SET opening=false, occupied=true WHERE slotId=${msg.payload[0].slotId}`;\n} \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 680,
        "wires": [
            [
                "08f7dfd670783def"
            ]
        ]
    },
    {
        "id": "08f7dfd670783def",
        "type": "sqlite",
        "z": "dba0e1f7a72441bb",
        "mydb": "7b1f540ae7b80b30",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "db",
        "x": 1550,
        "y": 680,
        "wires": [
            [
                "c5c2215e1fc13961"
            ]
        ]
    },
    {
        "id": "cbbb6b3383a1dda5",
        "type": "mqtt in",
        "z": "dba0e1f7a72441bb",
        "name": "",
        "topic": "reset",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "8fbde230d2e3fc73",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 70,
        "y": 880,
        "wires": [
            [
                "94b4911343997b15"
            ]
        ]
    },
    {
        "id": "94b4911343997b15",
        "type": "function",
        "z": "dba0e1f7a72441bb",
        "name": "reset-data",
        "func": "msg.topic = `UPDATE slot SET hn=\"\", opening=false, occupied=false WHERE slotId=${msg.payload.slot}`;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 880,
        "wires": [
            [
                "ee366a1f7ed7e268"
            ]
        ]
    },
    {
        "id": "878d60410858a501",
        "type": "mqtt in",
        "z": "dba0e1f7a72441bb",
        "name": "",
        "topic": "dispense",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "8fbde230d2e3fc73",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 80,
        "y": 700,
        "wires": [
            [
                "d0409d27fc01894d",
                "2d51849108386b50"
            ]
        ],
        "info": "# MQTT - Dispensing INPUT\n\nSubscribe to the publisher for the \"dispense\" mqtt-topic\n\npayload structure\n\n`\npayload: {\n    slot: number,\n    hn: string,\n    timestamp: number\n}\n`"
    },
    {
        "id": "d0409d27fc01894d",
        "type": "function",
        "z": "dba0e1f7a72441bb",
        "name": "SQL",
        "func": "msg.topic = `SELECT * FROM slot WHERE hn=${msg.payload.hn}`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 680,
        "wires": [
            [
                "9d97edb1b5ba5852"
            ]
        ],
        "info": "# Query String Sender\n\nComponent that build the query string to makes query to the database"
    },
    {
        "id": "9d97edb1b5ba5852",
        "type": "sqlite",
        "z": "dba0e1f7a72441bb",
        "mydb": "7b1f540ae7b80b30",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "db",
        "x": 470,
        "y": 660,
        "wires": [
            [
                "a3b0548d9e4e2207"
            ]
        ],
        "info": "# Database Instance [Dispensing]\n\nDatabase Instance Node for exeuting the SQL\noperation.\n\nThis instance is for querying any slot which has \nthe HN from the payload."
    },
    {
        "id": "a3b0548d9e4e2207",
        "type": "function",
        "z": "dba0e1f7a72441bb",
        "name": "GET",
        "func": "if(msg.payload[0] != undefined) {\n    msg.payload = { slot: msg.payload[0].slotId, ...msg.payload[0] };\n    return msg;  \n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 680,
        "wires": [
            [
                "95017ff6205466fe"
            ]
        ],
        "info": "# Dispensing Data Filter and Parser\n\nThis module will pass the founded data to the Executor node\nfor executing the slot opening.\n\nso it only send the message only when has the data from database node"
    },
    {
        "id": "128d321c62d83210",
        "type": "mqtt out",
        "z": "dba0e1f7a72441bb",
        "name": "",
        "topic": "dispensing",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8fbde230d2e3fc73",
        "x": 1810,
        "y": 500,
        "wires": []
    },
    {
        "id": "bfc6ad71abf096bb",
        "type": "mqtt out",
        "z": "dba0e1f7a72441bb",
        "name": "",
        "topic": "unlocking",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8fbde230d2e3fc73",
        "x": 1800,
        "y": 580,
        "wires": []
    },
    {
        "id": "2fa1eb2d4d11f974",
        "type": "trigger",
        "z": "dba0e1f7a72441bb",
        "name": "check-interval",
        "op1": "",
        "op2": "0",
        "op1type": "pay",
        "op2type": "str",
        "duration": "-1",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "31",
        "bytopic": "all",
        "topic": "payload.state",
        "outputs": 1,
        "x": 1400,
        "y": 500,
        "wires": [
            [
                "128d321c62d83210"
            ]
        ]
    },
    {
        "id": "884a7b734a978f82",
        "type": "trigger",
        "z": "dba0e1f7a72441bb",
        "name": "check-interval",
        "op1": "",
        "op2": "0",
        "op1type": "pay",
        "op2type": "str",
        "duration": "-1",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "31",
        "bytopic": "all",
        "topic": "payload.state",
        "outputs": 1,
        "x": 1400,
        "y": 580,
        "wires": [
            [
                "bfc6ad71abf096bb"
            ]
        ]
    },
    {
        "id": "2d51849108386b50",
        "type": "function",
        "z": "dba0e1f7a72441bb",
        "name": "PS",
        "func": "msg.payload = {\n    ...msg.payload,\n    dispensing: true,\n    unlocking: false,\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 560,
        "wires": [
            [
                "2fa1eb2d4d11f974"
            ]
        ],
        "info": "# Zero State Pusher [PS]\n\nDispensing state trigger by push the 0 to the Interval node\nthat will keeep push the dispensing state every second until received\nclose indicator which is 7"
    },
    {
        "id": "288f649f71d72f61",
        "type": "function",
        "z": "dba0e1f7a72441bb",
        "name": "PS",
        "func": "msg.payload = {\n    ...msg.payload,\n    unlocking: true,\n    dispensing:false\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 600,
        "wires": [
            [
                "884a7b734a978f82"
            ]
        ],
        "info": "# Zero State Pusher [PS]\n\nUnlocking state trigger by push the 0 to the Interval node\nthat will keeep push the unlocking state every second until received\nclose indicator which is 7"
    },
    {
        "id": "a5be227c41e825f2",
        "type": "mqtt in",
        "z": "dba0e1f7a72441bb",
        "name": "",
        "topic": "unlock",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "8fbde230d2e3fc73",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 70,
        "y": 760,
        "wires": [
            [
                "95017ff6205466fe",
                "288f649f71d72f61"
            ]
        ]
    },
    {
        "id": "8b74e81db129d18a",
        "type": "change",
        "z": "dba0e1f7a72441bb",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "reset",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1120,
        "y": 540,
        "wires": [
            [
                "2fa1eb2d4d11f974",
                "884a7b734a978f82"
            ]
        ]
    },
    {
        "id": "b67fcec21f9bcb66",
        "type": "mqtt out",
        "z": "dba0e1f7a72441bb",
        "name": "",
        "topic": "dispensing-reset",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8fbde230d2e3fc73",
        "x": 2130,
        "y": 440,
        "wires": []
    },
    {
        "id": "ee366a1f7ed7e268",
        "type": "sqlite",
        "z": "dba0e1f7a72441bb",
        "mydb": "7b1f540ae7b80b30",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "db",
        "x": 1070,
        "y": 1080,
        "wires": [
            [
                "9681067d13d2b557"
            ]
        ]
    },
    {
        "id": "5034d74a1b5a3ded",
        "type": "mqtt in",
        "z": "dba0e1f7a72441bb",
        "name": "",
        "topic": "dispensing",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "8fbde230d2e3fc73",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1800,
        "y": 440,
        "wires": [
            [
                "28d67334796979e7"
            ]
        ]
    },
    {
        "id": "28d67334796979e7",
        "type": "switch",
        "z": "dba0e1f7a72441bb",
        "name": "",
        "property": "$boolean([payload.occupied])\t\t",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1950,
        "y": 440,
        "wires": [
            [
                "b67fcec21f9bcb66"
            ]
        ]
    },
    {
        "id": "0d26b39b82417ba1",
        "type": "function",
        "z": "dba0e1f7a72441bb",
        "name": "PS",
        "func": "if(msg.payload[0] != undefined) {\n    msg.payload = {\n    ...msg.payload[0],\n    dispensing: false,\n    unlocking: false,\n    }\n    return msg;\n};\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 540,
        "wires": [
            [
                "128d321c62d83210",
                "bfc6ad71abf096bb"
            ]
        ],
        "info": "# Zero State Pusher [PS]\n\nDispensing state trigger by push the 0 to the Interval node\nthat will keeep push the dispensing state every second until received\nclose indicator which is 7"
    },
    {
        "id": "ea972304b1b2b16a",
        "type": "debug",
        "z": "dba0e1f7a72441bb",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 1020,
        "wires": []
    },
    {
        "id": "8113b4c190c570d0",
        "type": "debug",
        "z": "dba0e1f7a72441bb",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 680,
        "wires": []
    },
    {
        "id": "05697e61e7f516ca",
        "type": "serial-port",
        "serialport": "/dev/ttyUSB0",
        "serialbaud": "19200",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "0x02",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "8",
        "bin": "bin",
        "out": "count",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "8fbde230d2e3fc73",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "7b1f540ae7b80b30",
        "type": "sqlitedb",
        "db": "/home/nonthasak.l/Desktop/smc/db/slot.db",
        "mode": "RWC"
    }
]